@page "/alerts"
@inject HttpClient Http
@using BackgroundServices
@using StockTracker.Data
@rendermode InteractiveServer 
@using BlazorBootstrap



<h2>AAPL Data: @response   </h2>
<button @onclick = "GetStockInfo">Retrieve AAPL </button>
<button @onclick="TestEmail" > Test Email</button>
<h3>Alerts</h3>

<div class="alert-button-container">
    <button class="alert-button">SELECT</button>
    <button class="alert-button" @onclick="() => addAlertPopup = !addAlertPopup">ADD ALERT</button>
</div>
<div class="alert-list-container">


</div>



<div class="alert-body-container">
    <div class="current-alerts-container">Current Alerts</div>
    <div class="alert-buttons">
        <button class="alert-button" @onclick="() => addAlertPopup = !addAlertPopup">Add Alert</button>
        <button class="alert-button" @onclick="() => selectAlertPopup = !selectAlertPopup">Select Alert</button>
    </div>
</div>

<!--
    Add alert form must have:
        Symbol - from dropdown 
        Threshold 
        Condition
-->
@if (addAlertPopup)
{
    <div class="MD-Overlay" @onclick="() => addAlertPopup = false">
        <div class="MD-Popup" @onclick:stopPropagation>
            <form>
                <!-- alert name edit field and icon-->
                <div class="alert-name-container">
                    @if (editingAlertName)
                    {
                      <InputText 
                          @bind-Value=alertName
                          @onblur="() => editingAlertName = false"
                          @onkeyup="@((KeyboardEventArgs e) => 
                          {
                            if(e.Key =="Enter") editingAlertName = false;
                          })"
                          class="editable-input"/>
 
                    }
                    else{
                        <h4 class="editable-label" @onclick="BeginEdit"> 
                            @alertName
                        </h4>
                    }
                    <Icon Name="IconName.PencilFill" Size="IconSize.x6" Color="IconColor.Muted" onclick="BeginEdit"/>
                
                </div>
                <p>Enter the alert details below:</p>
                
                <div class="alert-detail-container">
                    <!-- tag dropdown -->
                    <div class="alert-tag-container"> 
                        <Button Color="ButtonColor.Primary" onclick="() => showTagDropdown = !showTagDropdown"> <Icon Name="IconName.ArrowDownShort"/>
                            @alertTag
                        </Button> 
                    </div>
                    <NumberInput TValue="int" @bind-Value="@addAlertThreshold" Placeholder="Stock Threshold" />
                </div>
                <button type="button" class="popup-button" @onclick="SubmitAlert">Submit</button>
            </form>
            <button class="popup-button" @onclick="() => addAlertPopup = false">Close</button>
        </div>
    </div>
}

@if (selectAlertPopup)
{
    <div class="MD-Overlay" @onclick="() => selectAlertPopup = false">
        <div class="MD-Popup" @onclick:stopPropagation>
            <h4>Select Alert</h4>
            <p>Choose an alert from the list:</p>
            <!-- Your Alert Selection List -->
            <ul>
                <li>Alert 1</li>
                <li>Alert 2</li>
                <li>Alert 3</li>
            </ul>
            <button class="popup-button" @onclick="() => selectAlertPopup = false">Close</button>
        </div>
    </div>
}

@code {
    private bool addAlertPopup = false;
    private int addAlertThreshold;

    private bool selectAlertPopup = false;
    private string response = "waiting";

    private bool editingAlertName = false;
    private string alertName = "Alert Name";

    private string alertTag = "Stock Tag";

    private bool showTagDropdown = false;

    private void SubmitAlert()
    {
        // Add your submission logic here
        addAlertPopup = false;
    }

    private void BeginEdit()
    {
        editingAlertName = true;


    }
    private void EndEdit()
    {
        editingAlertName = false;
    }
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
             EndEdit();
    }
    private async Task GetStockInfo()
    {
        response = "running";
        var symbol = "AAPL";
        var url = $"http://127.0.0.1:5000/get-stock-info?symbols={symbol}";

        try
        {
            var result = await Http.GetStringAsync(url);
            response = result;
        }
        catch(Exception ex)
        {
            response = $"Error: {ex.Message}";
        }
    }

    private async Task TestEmail()
    {
        response = "running";

        try
        {
            await EmailNotificationService.SendEmailAsync("stocktracker34@gmail.com", "Test Email 1", "Testing email functionlity");
            response = "Sent!";
        }
        catch (Exception ex)
        {
            response = $"Error sending email {ex.Message}";
        }

    }
}
